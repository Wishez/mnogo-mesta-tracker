import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { ParserService } from '../parser/parser.service';
import { StorageService } from '../storage/storage.service';
import { TelegramService } from '../telegram/telegram.service';

@Injectable()
export class TaskService {
  private readonly logger = new Logger(TaskService.name);
  private isFirstRun = true;

  constructor(
    private readonly parserService: ParserService,
    private readonly storageService: StorageService,
    private readonly telegramService: TelegramService,
  ) {}

  @Cron('0 * * * *') // –ö–∞–∂–¥—ã–π —á–∞—Å –≤ 0 –º–∏–Ω—É—Ç
  async handleCron() {
    try {
      this.logger.log('Starting cell monitoring...');

      const currentCells = await this.parserService.parseCells();
      this.logger.debug(`–ù–∞—à—ë–ª ${currentCells.length} —è—á–µ–µ–∫`);

      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (this.isFirstRun) {
        this.storageService.addCells(currentCells);
        this.isFirstRun = false;
        await this.telegramService.sendMessage(
          `<b>–ù–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å!</b>\n –û—Ç—Å–ª–µ–∂–∏–≤–∞—é —è—á–µ–π–∫–∏ ${currentCells.length}—à—Ç`,
        );
        await this.sendInfoAboutNewCells(currentCells);
        return;
      }

      const newCells = this.storageService.getNewCells(currentCells);
      const removedCells = this.storageService.getRemovedCells(currentCells);

      if (newCells.length > 0) {
        await this.sendInfoAboutNewCells(newCells);
      }

      if (removedCells.length > 0) {
        await this.sendInfoAboutVanishedCells(removedCells);
      }

      if (newCells.length === 0 && removedCells.length === 0) {
        this.logger.log('No changes detected');
      }
    } catch (error) {
      this.logger.error(`Monitoring error: ${error.message}`);
      await this.telegramService.sendMessage(
        `<b>‚ö†Ô∏è Monitoring error:</b>\n${error.message}`,
      );
    }
  }

  private async sendInfoAboutNewCells(cells: string[]) {
    const message = `<b>üî• –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–≤—ã–µ —è—á–µ–π–∫–∏:</b>\n${cells.join('\n')}`;
    await this.telegramService.sendMessage(message);
    this.storageService.addCells(cells);
  }

  private async sendInfoAboutVanishedCells(cells: string[]) {
    const message = `<b>‚ùå –Ø—á–µ–π–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã:</b>\n${cells.join('\n')}`;
    await this.telegramService.sendMessage(message);
    this.storageService.removeCells(cells);
  }
}
